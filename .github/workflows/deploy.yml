name: Deploy to AWS Elastic Beanstalk

on:
  push:
    tags:
      - 'v*'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1
          mask-aws-account-id: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: 248158220667.dkr.ecr.ap-southeast-1.amazonaws.com
          ECR_REPOSITORY: google-scraper
          IMAGE_TAG: ${{ github.ref_name }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Generate Dockerrun.aws.json and config files
        env:
          ECR_REGISTRY: 248158220667.dkr.ecr.ap-southeast-1.amazonaws.com
          ECR_REPOSITORY: google-scraper
          IMAGE_TAG: ${{ github.ref_name }}
        run: |
          # Create Dockerrun.aws.json
          echo '{
            "AWSEBDockerrunVersion": "1",
            "Image": {
              "Name": "'$ECR_REGISTRY'/'$ECR_REPOSITORY':'$IMAGE_TAG'",
              "Update": "true"
            },
            "Ports": [
              {
                "ContainerPort": "80",
                "HostPort": "80"
              }
            ]
          }' > Dockerrun.aws.json

          # Create .ebextensions directory
          mkdir -p .ebextensions

          # Create instance configuration
          echo 'option_settings:
            aws:autoscaling:launchconfiguration:
              InstanceType: t2.micro
              IamInstanceProfile: aws-elasticbeanstalk-ec2-role
              SecurityGroups: {"Fn::GetAtt" : ["AWSEBSecurityGroup", "GroupId"]}
            aws:ec2:vpc:
              VPCId: vpc-0bc27d3764c263367
              Subnets: subnet-0e033540039a89026,subnet-0f235bba2fb07b7ea
              ELBSubnets: subnet-0e033540039a89026,subnet-0f235bba2fb07b7ea
              DBSubnets: subnet-0e033540039a89026,subnet-0f235bba2fb07b7ea
              AssociatePublicIpAddress: true
            aws:rds:dbinstance:
              DBEngine: postgres
              DBEngineVersion: 15.3
              DBInstanceClass: db.t3.micro
              DBAllocatedStorage: 20
              MultiAZDatabase: false
              DBDeletionPolicy: Snapshot
            aws:elasticbeanstalk:application:environment:
              APP_NAME: "GoogleScraper"
              APP_ENV: "production"
              APP_DEBUG: "false"
              DB_CONNECTION: pgsql
              DB_HOST: ${RDS_HOSTNAME}
              DB_PORT: ${RDS_PORT}
              DB_DATABASE: ${RDS_DB_NAME}
              DB_USERNAME: ${RDS_USERNAME}
              DB_PASSWORD: ${RDS_PASSWORD}
            aws:elasticbeanstalk:container:docker:
              memory: 512' > .ebextensions/01-options.config

          # Create security group configuration
          echo 'Resources:
            AWSEBSecurityGroup:
              Type: AWS::EC2::SecurityGroup
              Properties:
                GroupDescription: Security group for Elastic Beanstalk environment
                VpcId: vpc-0bc27d3764c263367
                SecurityGroupIngress:
                  - IpProtocol: tcp
                    FromPort: 80
                    ToPort: 80
                    CidrIp: 0.0.0.0/0
                  - IpProtocol: tcp
                    FromPort: 443
                    ToPort: 443
                    CidrIp: 0.0.0.0/0' > .ebextensions/02-securitygroup.config

          # Create zip file containing both Dockerrun.aws.json and .ebextensions
          zip -r deploy.zip Dockerrun.aws.json .ebextensions/

      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: google-scraper
          environment_name: google-scraper-prod
          region: ap-southeast-1
          version_label: ${{ github.ref_name }}
          deployment_package: deploy.zip
          wait_for_environment_recovery: 300
